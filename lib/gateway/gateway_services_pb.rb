# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: gateway/gateway.proto for package 'gateway'
# Original file comments:
# Copyright the Hyperledger Fabric contributors. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

require 'grpc'
require 'gateway/gateway_pb'

module Gateway
  module Gateway
    # The Gateway API for evaluating and submitting transactions via the gateway.
    # Transaction evaluation (query) requires the invocation of the Evaluate service
    # Transaction submission (ledger updates) is a two step process invoking Endorse
    # followed by Submit. A third step, invoking CommitStatus, is required if the
    # clients wish to wait for a Transaction to be committed.
    # The proposal and transaction must be signed by the client before each step.
    class Service

      include ::GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'gateway.Gateway'

      # The Endorse service passes a proposed transaction to the gateway in order to
      # obtain sufficient endorsement.
      # The gateway will determine the endorsement plan for the requested chaincode and
      # forward to the appropriate peers for endorsement. It will return to the client a
      # prepared transaction in the form of an Envelope message as defined
      # in common/common.proto. The client must sign the contents of this envelope
      # before invoking the Submit service.
      rpc :Endorse, ::Gateway::EndorseRequest, ::Gateway::EndorseResponse
      # The Submit service will process the prepared transaction returned from Endorse service
      # once it has been signed by the client. It will wait for the transaction to be submitted to the
      # ordering service but the client must invoke the CommitStatus service to wait for the transaction
      # to be committed.
      rpc :Submit, ::Gateway::SubmitRequest, ::Gateway::SubmitResponse
      # The CommitStatus service will indicate whether a prepared transaction previously submitted to
      # the Submit sevice has been committed. It will wait for the commit to occur if it hasnâ€™t already
      # committed.
      rpc :CommitStatus, ::Gateway::SignedCommitStatusRequest, ::Gateway::CommitStatusResponse
      # The Evaluate service passes a proposed transaction to the gateway in order to invoke the
      # transaction function and return the result to the client. No ledger updates are made.
      # The gateway will select an appropriate peer to query based on block height and load.
      rpc :Evaluate, ::Gateway::EvaluateRequest, ::Gateway::EvaluateResponse
      # The ChaincodeEvents service supplies a stream of responses, each containing all the events emitted by the
      # requested chaincode for a specific block. The streamed responses are ordered by ascending block number. Responses
      # are only returned for blocks that contain the requested events, while blocks not containing any of the requested
      # events are skipped.
      rpc :ChaincodeEvents, ::Gateway::SignedChaincodeEventsRequest, stream(::Gateway::ChaincodeEventsResponse)
    end

    Stub = Service.rpc_stub_class
  end
end
